import {
  Dexie
} from "./chunk-BNXH64T3.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/dexie-react-hooks/dist/dexie-react-hooks.mjs
var import_react = __toESM(require_react(), 1);
function useObservable(observableFactory, arg2, arg3) {
  var deps;
  var defaultResult;
  if (typeof observableFactory === "function") {
    deps = arg2 || [];
    defaultResult = arg3;
  } else {
    deps = [];
    defaultResult = arg2;
  }
  var monitor = import_react.default.useRef({
    hasResult: false,
    result: defaultResult,
    error: null
  });
  var _a = import_react.default.useReducer(function(x) {
    return x + 1;
  }, 0);
  _a[0];
  var triggerUpdate = _a[1];
  var observable = import_react.default.useMemo(function() {
    var observable2 = typeof observableFactory === "function" ? observableFactory() : observableFactory;
    if (!observable2 || typeof observable2.subscribe !== "function") {
      if (observableFactory === observable2) {
        throw new TypeError("Given argument to useObservable() was neither a valid observable nor a function.");
      } else {
        throw new TypeError("Observable factory given to useObservable() did not return a valid observable.");
      }
    }
    if (!monitor.current.hasResult && typeof window !== "undefined") {
      if (typeof observable2.hasValue !== "function" || observable2.hasValue()) {
        if (typeof observable2.getValue === "function") {
          monitor.current.result = observable2.getValue();
          monitor.current.hasResult = true;
        } else {
          var subscription = observable2.subscribe(function(val) {
            monitor.current.result = val;
            monitor.current.hasResult = true;
          });
          if (typeof subscription === "function") {
            subscription();
          } else {
            subscription.unsubscribe();
          }
        }
      }
    }
    return observable2;
  }, deps);
  import_react.default.useDebugValue(monitor.current.result);
  import_react.default.useEffect(function() {
    var subscription = observable.subscribe(function(val) {
      var current = monitor.current;
      if (current.error !== null || current.result !== val) {
        current.error = null;
        current.result = val;
        current.hasResult = true;
        triggerUpdate();
      }
    }, function(err) {
      var current = monitor.current;
      if (current.error !== err) {
        current.error = err;
        triggerUpdate();
      }
    });
    return typeof subscription === "function" ? subscription : subscription.unsubscribe.bind(subscription);
  }, deps);
  if (monitor.current.error)
    throw monitor.current.error;
  return monitor.current.result;
}
function useLiveQuery(querier, deps, defaultResult) {
  return useObservable(function() {
    return Dexie.liveQuery(querier);
  }, deps || [], defaultResult);
}
function usePermissions(firstArg, table, obj) {
  if (!firstArg)
    throw new TypeError("Invalid arguments to usePermissions(): undefined or null");
  var db;
  if (arguments.length >= 3) {
    if (!("transaction" in firstArg)) {
      throw new TypeError("Invalid arguments to usePermission(db, table, obj): 1st arg must be a Dexie instance");
    }
    if (typeof table !== "string")
      throw new TypeError("Invalid arguments to usePermission(db, table, obj): 2nd arg must be string");
    if (!obj || typeof obj !== "object")
      throw new TypeError("Invalid arguments to usePermission(db, table, obj): 3rd arg must be an object");
    db = firstArg;
  } else {
    if (firstArg instanceof Dexie)
      throw new TypeError("Invalid arguments to usePermission(db, table, obj): Missing table and obj arguments.");
    if (typeof firstArg.table === "function" && typeof firstArg.db === "object") {
      db = firstArg.db;
      obj = firstArg;
      table = firstArg.table();
    } else {
      throw new TypeError("Invalid arguments to usePermissions(). Expected usePermissions(entity: DexieCloudEntity) or usePermissions(db: Dexie, table: string, obj: DexieCloudObject)");
    }
  }
  if (!("cloud" in db))
    throw new Error("usePermissions() is only for Dexie Cloud but there's no dexie-cloud-addon active in given db.");
  if (!("permissions" in db.cloud))
    throw new Error("usePermissions() requires a newer version of dexie-cloud-addon. Please upgrade it.");
  return useObservable(
    // @ts-ignore
    function() {
      return db.cloud.permissions(obj, table);
    },
    [obj.realmId, obj.owner, table]
  );
}
var gracePeriod = 100;
var fr = typeof FinalizationRegistry !== "undefined" && new FinalizationRegistry(function(doc) {
  var DexieYProvider = Dexie["DexieYProvider"];
  if (DexieYProvider)
    DexieYProvider.release(doc);
});
function useDocument(doc) {
  var _a, _b;
  if (!fr)
    throw new TypeError("FinalizationRegistry not supported.");
  var providerRef = import_react.default.useRef(null);
  var DexieYProvider = Dexie["DexieYProvider"];
  if (!DexieYProvider) {
    throw new Error("DexieYProvider is not available. Make sure `y-dexie` is installed and imported.");
  }
  var unregisterToken = void 0;
  if (doc) {
    if (doc !== ((_a = providerRef.current) === null || _a === void 0 ? void 0 : _a.doc)) {
      providerRef.current = DexieYProvider.load(doc, { gracePeriod });
      unregisterToken = /* @__PURE__ */ Object.create(null);
      fr.register(providerRef, doc, unregisterToken);
    }
  } else if ((_b = providerRef.current) === null || _b === void 0 ? void 0 : _b.doc) {
    providerRef.current = null;
  }
  import_react.default.useEffect(function() {
    if (doc) {
      if (unregisterToken)
        fr.unregister(unregisterToken);
      var provider = DexieYProvider.for(doc);
      if (provider) {
        return function() {
          DexieYProvider.release(doc);
        };
      } else {
        throw new Error("FATAL. DexieYProvider.release() has been called somewhere in application code, making us lose the document.");
      }
    }
  }, [doc, unregisterToken]);
  return providerRef.current;
}
export {
  useDocument,
  useLiveQuery,
  useObservable,
  usePermissions
};
//# sourceMappingURL=dexie-react-hooks.js.map
